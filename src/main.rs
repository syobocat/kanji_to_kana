use std::env;
use std::fs::File;
use std::io::prelude::*;

const DICSEION: [[&str; 2]; 72] = [
    ["が", "か"],
    ["ぎ", "き"],
    ["ぐ", "く"],
    ["げ", "け"],
    ["ご", "こ"],
    ["ざ", "さ"],
    ["じ", "し"],
    ["ず", "す"],
    ["ぜ", "せ"],
    ["ぞ", "そ"],
    ["だ", "た"],
    ["ぢ", "ち"],
    ["づ", "つ"],
    ["で", "て"],
    ["ど", "と"],
    ["ば", "は"],
    ["び", "ひ"],
    ["ぶ", "ふ"],
    ["べ", "へ"],
    ["ぼ", "ほ"],
    ["ぱ", "は"],
    ["ぴ", "ひ"],
    ["ぷ", "ふ"],
    ["ぺ", "へ"],
    ["ぽ", "ほ"],
    ["ぁ", "あ"],
    ["ぃ", "い"],
    ["ぅ", "う"],
    ["ぇ", "え"],
    ["ぉ", "お"],
    ["っ", "つ"],
    ["ゃ", "や"],
    ["ゅ", "ゆ"],
    ["ょ", "よ"],
    ["ゎ", "わ"],
    ["ガ", "カ"],
    ["ギ", "キ"],
    ["グ", "ク"],
    ["ゲ", "ケ"],
    ["ゴ", "コ"],
    ["ザ", "サ"],
    ["ジ", "シ"],
    ["ズ", "ス"],
    ["ゼ", "セ"],
    ["ゾ", "ソ"],
    ["ダ", "タ"],
    ["ヂ", "チ"],
    ["ヅ", "ツ"],
    ["デ", "テ"],
    ["ド", "ト"],
    ["バ", "ハ"],
    ["ビ", "ヒ"],
    ["ブ", "フ"],
    ["ベ", "ヘ"],
    ["ボ", "ホ"],
    ["パ", "ハ"],
    ["ピ", "ヒ"],
    ["プ", "フ"],
    ["ペ", "ヘ"],
    ["ポ", "ホ"],
    ["ァ", "ア"],
    ["ィ", "イ"],
    ["ゥ", "ウ"],
    ["ェ", "エ"],
    ["ォ", "オ"],
    ["ヵ", "カ"],
    ["ヶ", "ケ"],
    ["ッ", "ツ"],
    ["ャ", "ヤ"],
    ["ュ", "ユ"],
    ["ョ", "ヨ"],
    ["ヮ", "ワ"],
];

const DICHIRAGANA: [[&str; 2]; 48] = [
    ["安", "あ"],
    ["以", "い"],
    ["宇", "う"],
    ["衣", "え"],
    ["於", "お"],
    ["加", "か"],
    ["幾", "き"],
    ["久", "く"],
    ["計", "け"],
    ["己", "こ"],
    ["左", "さ"],
    ["之", "し"],
    ["寸", "す"],
    ["世", "せ"],
    ["曽", "そ"],
    ["太", "た"],
    ["知", "ち"],
    ["川", "つ"],
    ["天", "て"],
    ["止", "と"],
    ["奈", "な"],
    ["仁", "に"],
    ["奴", "ぬ"],
    ["祢", "ね"],
    ["乃", "の"],
    ["波", "は"],
    ["比", "ひ"],
    ["不", "ふ"],
    ["部", "へ"],
    ["保", "ほ"],
    ["末", "ま"],
    ["美", "み"],
    ["武", "む"],
    ["女", "め"],
    ["毛", "も"],
    ["也", "や"],
    ["由", "ゆ"],
    ["与", "よ"],
    ["良", "ら"],
    ["利", "り"],
    ["留", "る"],
    ["礼", "れ"],
    ["呂", "ろ"],
    ["和", "わ"],
    ["為", "ゐ"],
    ["恵", "ゑ"],
    ["遠", "を"],
    ["无", "ん"],
];

const DICKATAKANA: [[&str; 2]; 48] = [
    ["阿", "ア"],
    ["伊", "イ"],
    ["宇", "ウ"],
    ["江", "エ"],
    ["於", "オ"],
    ["加", "カ"],
    ["機", "キ"],
    ["久", "ク"],
    ["介", "ケ"],
    ["己", "コ"],
    ["散", "サ"],
    ["之", "シ"],
    ["須", "ス"],
    ["世", "セ"],
    ["曽", "ソ"],
    ["多", "タ"],
    ["千", "チ"],
    ["川", "ツ"],
    ["天", "テ"],
    ["止", "ト"],
    ["奈", "ナ"],
    ["仁", "ニ"],
    ["奴", "ヌ"],
    ["祢", "ネ"],
    ["乃", "ノ"],
    ["八", "ハ"],
    ["比", "ヒ"],
    ["不", "フ"],
    ["部", "ヘ"],
    ["保", "ホ"],
    ["末", "マ"],
    ["三", "ミ"],
    ["牟", "ム"],
    ["女", "メ"],
    ["毛", "モ"],
    ["也", "ヤ"],
    ["由", "ユ"],
    ["與", "ヨ"],
    ["良", "ラ"],
    ["利", "リ"],
    ["流", "ル"],
    ["礼", "レ"],
    ["呂", "ロ"],
    ["和", "ワ"],
    ["井", "ヰ"],
    ["恵", "ヱ"],
    ["乎", "ヲ"],
    ["尓", "ン"],
];

fn main() {
    let args: Vec<String> = env::args().collect();

    let mut f: File;
    let mut input = String::new();
    match File::open(&args[2]) {
        Ok(x) => {
            f = x;
            f.read_to_string(&mut input)
                .expect("ファイルが読み込めません");
        }
        Err(_) => panic!("ファイルがありません"),
    }

    let output: String;
    match args[1].as_str() {
        "--k" => output = kana_to_kanji(input),
        "--k-hg" => output = kanji_to_hiragana(input),
        "--k-kk" => output = kanji_to_katakana(input),
        "--k-kk-hg" => output = kanji_to_hiragana(kanji_to_katakana(input)),
        "--k-hg-kk" => output = kanji_to_katakana(kanji_to_hiragana(input)),
        _ => panic!("引数が間違っています"),
    }

    println!("{}", output);
}

fn kanji_to_hiragana(text: String) -> String {
    let mut output = text;
    for i in &DICHIRAGANA {
        output = output.replace(i[0], i[1]);
    }
    output
}

fn kana_to_kanji(text: String) -> String {
    let mut output = text;
    for i in &DICSEION {
        output = output.replace(i[0], i[1]);
    }
    for i in &DICHIRAGANA {
        output = output.replace(i[1], i[0]);
    }
    for i in &DICKATAKANA {
        output = output.replace(i[1], i[0]);
    }
    output
}

fn kanji_to_katakana(text: String) -> String {
    let mut output = text;
    for i in &DICKATAKANA {
        output = output.replace(i[0], i[1]);
    }
    output
}
